import java.util.ArrayList;

public class Square
{
   // Row: type
   // Column: no food / has food
   private int[][] ants = new int[2][2];

   public Square()
   {
   }

   public Square(int[][] ants)
   {
      this.ants = ants;
   }

   public void addAnts(int i, int j, int amt)
   {
      ants[i][j] += amt;
   }

   public void anthillInit(int type)
   {
      ants[type][0] = 2000;
   }

   public void combat()
   {
      if (ants[0][0] + ants[0][1] != 0 && ants[1][0] + ants[1][1] != 0)
      {
         // FIGHT!
      }
   }

   public int[][] getAnts()
   {
      return ants;
   }

   public int getFood(int food)
   {
      int newFood = food;
      double unfed = ants[0][0] + ants[1][0];
      int temp = (int) (food * ants[0][0] / unfed);
      ants[0][0] -= temp;
      ants[0][1] += temp;
      newFood -= temp;
      temp = (int) (food * ants[1][0] / unfed);
      ants[1][0] -= temp;
      ants[1][1] += temp;
      return newFood - temp;

   }

   // Fix so that both add/sub uses methods?
   public void transferAnts(Square sq, int[][] tr)
   {
      for (int i = 0; i < ants.length; i++)
         for (int j = 0; j < ants[i].length; j++)
         {
            ants[i][j] -= tr[i][j];
            sq.addAnts(i, j, tr[i][j]);
         }
   }
   
   protected static int move(ArrayList<Food> food, double fb, int x, int y,
         int speed)

   {// ,
    // boolean hasFood, Anthill[] anthills) {
    // the higher the value of the direction, the more likely the ant is to
    // move in that direction
    // TODO: Make array?
      double up = speed, down = speed, left = speed, right = speed, nothing = 1;

      if (true)
      {// hasFood) {
       // for (Anthill hill : anthills)
       // if (hill.correctType() == true)
       // hill.calculateDist();

      }

      for (int i = 0; i < food.size(); i++)
      {
         // Gets are costly ...
         Food f = food.get(i);
         double add = fb * f.getAmt(); // nicer code
         int rx = f.getX() - x;
         int ry = f.getY() - y;
         // X dist
         if (rx > 0)
         {
            right += add / (rx * rx);
         } else if (rx < 0)
         {
            left += add / (rx * rx);
         }
         // Y dist
         if (ry < 0)
         {
            up += add / (ry * ry);
         } else
         {
            down += add / (ry * ry);
         }
      }
      double sum = up + down + left + right + nothing;
      up /= sum;
      down /= sum;
      left /= sum;
      right /= sum;

      double R = Math.random();

      if (R < up)
         return 1;
      else if (R < up + down)
         return 2;
      else if (R < up + down + left)
         return 3;
      else if (R < up + down + left + right)
         return 4;
      else
         return 0;
   }
   

}
