public class Common
{
   public static final int ITERATIONS = 100000;
   public static final int ANTHILLANTS = 10000;
   public static final int NEWANTHILLPOP = 0;
   public static final int MATRIXSIZE = 100;
   public static final int FRAMESIZE = 1000; 
   public static final int SQSIZE = FRAMESIZE / MATRIXSIZE; // Size of a separate square in graphical rep.
   public static final int ANTHILLDIST = 40; // Distance constant for how new anthills to occur 
   public static final int FOODSTACKS = 30; // Number of new foodstacks
   public static final int FOODSTACKSIZE = 1500; // New food size max value
   public static final int MIGRATELIMIT = 8000; // Food limit for when to commence migrationary measures
   public static final int ANTHILL_LIMIT= 25; // Maximum amount of anthills
   public static final int ANTGENERATION= 1; // New ants in anthill per timestep
   public static final double FOODBIAS = 3; // Bias to go towards food
   public static final double HOMEBIAS = 10000; // Bias to return home when having gathered food
   public static final double COMBATCONST = 0.001; // Combat modifying constant
   public static final double FOODCHANCE = 1 / 10.; // Chance of new food during timestep
   public static final double NOTHING_DIR = 10.; // Constant for chance of standing still
   
   

   // Carmack's fast inverse square root
   public static double invSqrt(double x)
   {
      double xhalf = 0.5d * x;
      long i = Double.doubleToLongBits(x);
      i = 0x5fe6ec85e7de30daL - (i >> 1);
      x = Double.longBitsToDouble(i);
      x = x * (1.5d - xhalf * x * x);
      return x;

   }
}