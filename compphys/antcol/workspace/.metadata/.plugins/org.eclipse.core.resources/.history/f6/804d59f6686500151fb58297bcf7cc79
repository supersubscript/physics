import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFrame;


// TODO: Home bias for move
// TODO: Combat
// TODO: Graphics
// TODO: Home bias for move

public class Forest
{
   Square[][] squares;
   double fb = 0.01;
   int size = 100;
   Random rand = new Random();
   ArrayList<Food> foodPos = new ArrayList<Food>();
   ArrayList<Anthill> anthills = new ArrayList<Anthill>();

   public static void main(String[] args)
   {
      int iterations = 10000;
      Forest forr = new Forest();
      forr.initialize();
      // // Generates frame
      // JFrame frame = new JFrame();
      //
      // // Sets frame resolution and other parameters.
      // frame.setSize(600, 600);
      // frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      // AntPanel panel = new AntPanel(frame.getWidth(), frame.getHeight());
      // frame.getContentPane().add(panel);
      // frame.setVisible(true);
      // frame.setResizable(false);

      while (iterations-- > 0)
      {
         forr.timeStep();
         System.out.println(iterations);
      }
   }

   public void timeStep()
   {
      // Add/increment stacks of food by given chance
      if (rand.nextDouble() < .05)
         addFood();

      // Resolve combats due to ants of different types on same squares
      // TODO: Put combat and move in same loop? Might be tricky to implement
      // nicely.
      for (int i = 0; i < squares.length; i++)
         for (int j = 0; j < squares[0].length; j++)
            squares[i][j].combat();

      // Move ants!
      // Really don't know how to fix this nicely ...
      for (int i = 0; i < squares.length; i++)
         for (int j = 0; j < squares[0].length; j++)
         {
            // Used a lot, a lot, a lot
            Square sq = squares[i][j];

            int[][][] transfer = sq.move(foodPos, fb, i, j);

            // Utmost left
            if (i == 0)
            {
               // Bottom left corner
               if (j == 0)
               {
                  sq.transferAnts(squares[i][j + 1], transfer[0]);
                  sq.transferAnts(squares[i + 1][j], transfer[3]);
               }
               // Top left corner
               else if (j == squares[i].length - 1)
               {
                  sq.transferAnts(squares[i][j - 1], transfer[1]);
                  sq.transferAnts(squares[i + 1][j], transfer[3]);
               } else
               {
                  sq.transferAnts(squares[i][j + 1], transfer[0]);
                  sq.transferAnts(squares[i][j - 1], transfer[1]);
                  sq.transferAnts(squares[i + 1][j], transfer[3]);
               }
            }
            // Utmost bottom
            else if (j == 0)
            {
               // Bottom right corner
               if (i == squares.length - 1)
               {
                  sq.transferAnts(squares[i][j + 1], transfer[0]);
                  sq.transferAnts(squares[i - 1][j], transfer[2]);
               } else
               {
                  sq.transferAnts(squares[i][j + 1], transfer[0]);
                  sq.transferAnts(squares[i - 1][j], transfer[2]);
                  sq.transferAnts(squares[i + 1][j], transfer[3]);
               }
            }
            // utmost right
            else if (i == squares.length - 1)
            {
               // top right corner
               if (j == squares[i].length - 1)
               {
                  sq.transferAnts(squares[i][j - 1], transfer[1]);
                  sq.transferAnts(squares[i - 1][j], transfer[2]);
               } else
               {
                  sq.transferAnts(squares[i][j + 1], transfer[0]);
                  sq.transferAnts(squares[i][j - 1], transfer[1]);
                  sq.transferAnts(squares[i - 1][j], transfer[2]);
               }
            }
            // Top line
            else if (j == squares.length - 1)
            {
               sq.transferAnts(squares[i][j - 1], transfer[1]);
               sq.transferAnts(squares[i - 1][j], transfer[2]);
               sq.transferAnts(squares[i + 1][j], transfer[3]);
            }
            // Not on boundary
            else
            {
               sq.transferAnts(squares[i][j + 1], transfer[0]);
               sq.transferAnts(squares[i][j - 1], transfer[1]);
               sq.transferAnts(squares[i - 1][j], transfer[2]);
               sq.transferAnts(squares[i + 1][j], transfer[3]);
            }
         }

      for (Anthill hill : anthills)
         if (hill.getFood() > 2000)
            hill.migrate();

   }

   // Randomize number of stacks, position and amount of food
   // Values right now are arbitrary
   public void addFood()
   {
      for (int i = 0; i < 1 + rand.nextInt(10); i++)
      {
         int x = rand.nextInt(squares.length);
         int y = rand.nextInt(squares.length);

         // Check if position already occupied
         for (Food f : foodPos)
         {
            if (f.getX() == x && f.getY() == y)
            {
               f.setAmt(f.getAmt() + rand.nextInt(300));
               return;
            }
         }
         foodPos.add(new Food(x, y, rand.nextInt(300)));
      }
   }

   // Check all food occupied squares and distribute food amongst present ants
   public void getFood()
   {
      for (Food food : foodPos)
      {
         food.setAmt(squares[food.getX()][food.getY()].getFood(food.getAmt()));
         if (food.getAmt() < 1)
            foodPos.remove(food);
      }
   }

   // Initialize Forest
   public void initialize()
   {
      squares = new Square[size][100];
      for (int i = 0; i < squares.length; i++)
         for (int j = 0; j < squares[0].length; j++)
            squares[i][j] = new Square();

      // Initialize anthills in first and third quadrant
      anthills.add(
            new Anthill(squares.length / 2 + rand.nextInt(squares.length / 2),
                  squares[0].length / 2 + rand.nextInt(squares.length / 2),
                  BruteAnt.INDEX));
      anthills.add(new Anthill(rand.nextInt(squares.length / 2),
            rand.nextInt(squares[0].length / 2), SpeedAnt.INDEX));

      // Loop if we want to add extra ...
      // Add starting ants to anthill
      for (Anthill hill : anthills)
         squares[hill.getX()][hill.getY()].anthillInit(hill.getType());

      // Must start with some food
      addFood();
   }
}
