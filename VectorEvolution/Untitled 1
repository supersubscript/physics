	public static double totalDistance(ArrayList<Bitstring> targets,
			ArrayList<Bitstring> seekers)
	{
		double total = 0;
		targets.sort(bc);
		seekers.sort(bc);
		ArrayList<DistancePair> pairs = new ArrayList<DistancePair>();

		int j = 0;
		for (int i = 0; i < seekers.size(); i++)
		{
			Bitstring seeker = seekers.get(i);

			for (; j < targets.size();)
			{
				Bitstring target = targets.get(j);
				double dist = encoding.distance(seekers.get(i), targets.get(j));

				if (j == targets.size() - 1)
				{
					pairs.add(new DistancePair(seeker, target, dist));
					break;
				} else if (dist == encoding.distance(seeker, targets.get(j + 1)))
				{
					pairs.add(new DistancePair(seeker, target, dist));
					j++;
				} else if (dist < encoding.distance(seeker, targets.get(j + 1)))
				{
					pairs.add(new DistancePair(seeker, target, dist));
					break;
				} else j++;
			}
		}

		// Sum the total distance for all the pairs. Add @param PENALTY if
		// target
		// is double tagged.
		Set<Bitstring> alreadyTagged = new HashSet<Bitstring>();
		pairs.sort(dpc);
		for (DistancePair p : pairs)
		{
			Bitstring b = p.second;
			if (alreadyTagged.contains(b))
				total += p.distance + PENALTY;
			else
			{
				total += p.distance;
				alreadyTagged.add(b);
			}
		}
		return total;
	}