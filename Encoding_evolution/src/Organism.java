
/**
 * An abstract class representing an Organism. Implementing classes should
 * present an implementation of the Organism.Factory interface
 * 
 * @param <O>
 *           The parameter O refers to the implementing class itself.
 */
public abstract class Organism<O extends Organism<O>>
{

	/**
	 * An Organism should be created using the appropriate factory for that
	 * species.
	 */
	protected Organism()
	{
	}

	/**
	 * Make time pass one turn. This can alter the internal state of the Organism
	 * when necessary.
	 */
	public void tick()
	{
	}

	/**
	 * Finalize the life of this Organism.
	 */
	public void die()
	{
	}

	/**
	 * Initialize the life of this Organism.
	 */
	public void birth()
	{
	}

	/**
	 * An interface designed to create Organisms.
	 * 
	 * @author adriaan
	 *
	 * @param <S>
	 *           The species of Organism generated by this Factory.
	 */
	public interface Factory<O extends Organism<O>>
	{

		public O random();

		/**
		 * Create an exact copy of an Organism. This method may alter the state of
		 * the given Organism. Only invoke when all external factors are ready
		 * (e.g. there is room for offspring). Returns null when no child can be
		 * created.
		 */
		public O copy(O o);

		/**
		 * Create offspring for this Organism. This method may alter the state of
		 * the given Organism. Only invoke when all external factors are ready
		 * (e.g. there is room for offspring). Returns null when no child can be
		 * created.
		 */
		public O split(O o);

		/**
		 * Create offspring from two Organisms. This method may alter the state of
		 * the given Organism. Only invoke when all external factors are ready
		 * (e.g. there is room for offspring). Returns null when no child can be
		 * created.
		 */
		public O sex(O mommy, O daddy);

	}

}
